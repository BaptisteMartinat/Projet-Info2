#ifndef BADLAND_H
#define BADLAND_H

#include <allegro.h>
#include <math.h>

#define MY_SCREEN_W 800       // Largeur fenêtre
#define MY_SCREEN_H 600       // Hauteur fenêtre
#define FIN_MER_X 9450        // Position X fin du niveau mer
#define FIN_MER_Y 150         // Position Y fin du niveau mer
#define SCENE_WIDTH 13500     // Largeur totale du niveau
#define DECOR_SCROLL_SPEED 3  // Vitesse de défilement par défaut

#define GRAVITY 1             // Force de gravité
#define JUMP_STRENGTH -11     // Puissance de saut
#define NB_CHAMPI 4           // Nombre de champignons
#define NB_LIANE 4            // Nombre de lianes
#define MAX_NAME_LENGTH 30    // Taille max nom joueur
#define SAVE_FILE "save.txt"  // Fichier de sauvegarde
#define NB_CHECKPOINTS 4      // Nombre de checkpoints
#define NB_ROUES 5           // Nombre de roues/enemies
#define NB_BONUS_TYPES 4     // Types de bonus (Gros, Petit, Vite, Invincible)
#define NB_BONUS_PAR_TYPE 3  // Instances de chaque bonus
#define NB_POISSON 4         // Nombre de poissons ennemis
#define NB_CRABE 7           // Nombre de crabes ennemis

#define COLLISION_RADIUS 18   // Rayon de collision



// Enumération des types de niveaux
typedef enum {
    NIVEAU_VOLCAN,
    NIVEAU_MONTAGNE,
    NIVEAU_MER,
    NB_NIVEAUX
} TypeNiveau;

// Structure du joueur principal
typedef struct {
    int x, y;                 // Position
    int dx, dy;               // Vitesse
    int largeur, hauteur;     // Dimensions
    char nom[MAX_NAME_LENGTH];// Nom du joueur
    int niveau;               // Niveau actuel (TypeNiveau)
    int bonus_vite_actif;     // Bonus vitesse activé
    int sprite_state;         // État sprite (0=normal, 1=saut)
} Joueur;

// Structure pour les roues/enemies animés
typedef struct {
    int x, y;                // Position
    int frame;               // Frame d'animation
    int sens_vertical;       // Direction (1=descend, -1=monte)
    int limite_haut;         // Limite haute
    int limite_bas;          // Limite basse
} Roue;

// Structure pour les checkpoints
typedef struct {
    int x, y, scroll;        // Position
    int actif;               // Activation
} Checkpoint;

// Structures simples pour les éléments interactifs
typedef struct { int x, y, scroll; } champi;   // Champignons
typedef struct { int x, y, scroll; } liane;    // Lianes
typedef struct { int x, y, scroll; } poisson;  // Poissons ennemis
typedef struct { int x, y, scroll; } crabe;    // Crabes ennemis

// Structure des ressources graphiques par niveau
typedef struct {
    // Chemins des assets
    char* fond_path;           // Fond du niveau
    char* collision_path;      // Carte de collision
    char* sprite1_path;        // Sprite joueur normal
    char* sprite2_path;        // Sprite joueur saut
    char* img_vite_path;       // Bonus vitesse
    char* img_gros_path;      // Bonus taille gros
    char* explosion_path;      // Animation explosion
    char* champi_path;         // Sprite champignon
    char* liane_path;          // Sprite liane
    char* poisson_path;        // Sprite poisson
    char* crabe_path;          // Sprite crabe
    char* img_invincible_path; // Bonus invincibilité
    char* trainee_path;        // Effet de traînée
    char* img_petit_path;      // Bonus taille petit
    char* img_fin_path;        // Image de fin de niveau

    // Positions des éléments
    int positions_champi[NB_CHAMPI][2];  // Positions champignons
    int positions_liane[NB_LIANE][2];    // Positions lianes
    int positions_poisson[NB_POISSON][2];// Positions poissons
    int positions_crabe[NB_CRABE][2];    // Positions crabes

    // Positions des bonus
    int gros_positions[3][2];   // Positions bonus gros
    int petit_positions[3][2];  // Positions bonus petit
    int vite_positions[3][2];   // Positions bonus vitesse

    // Quantités réelles
    int nb_gros;                // Nombre de bonus gros
    int nb_petit;               // Nombre de bonus petit
    int nb_vite;                // Nombre de bonus vitesse

    // Autres ressources
    char* roues_paths[4];       // Sprites des roues
    char* checkpoint_path;      // Sprite checkpoint
    char* musique_path;         // Musique du niveau

    // Positions
    int positions_cp[NB_CHECKPOINTS][2];  // Positions checkpoints
    Roue roues_positions[NB_ROUES];       // Positions roues
} NiveauRessources;

// Structure pour les bonus
typedef struct {
    int x, y;        // Position
    int actif;       // Activation
    int type;        // Type (0=gros, 1=petit, 2=vite)
} Bonus;

#define MAX_BONUS 10  // Nombre max de bonus par niveau

// État global du jeu
typedef struct {
    Joueur joueur;                 // Données joueur
    TypeNiveau niveau_actuel;      // Niveau courant
    int decor_scroll;              // Position défilement
    int temps_jeu;                 // Chrono jeu
    int dernier_cp;                // Dernier checkpoint
    int joueur_est_mort;           // État vie/mort
    int positions_cp[NB_CHECKPOINTS][2];  // Positions checkpoints
    int position_champi[NB_CHAMPI][2];    // Positions champignons
    int position_liane[NB_LIANE][2];      // Positions lianes
    int position_poisson[NB_POISSON][2];  // Positions poissons
    int position_crabe[NB_CRABE][2];      // Positions crabes
    int timer_saut;                // Compteur saut
    int temps_trainee;             // Compteur traînée
    int temps_depart;              // Temps départ niveau

    // Ressources graphiques chargées
    BITMAP *fond;                  // Fond du niveau
    BITMAP *page;                  // Buffer d'affichage
    BITMAP *collision_map;         // Carte collisions
    BITMAP *sprite_joueur[2];      // Sprites joueur
    BITMAP *img_bonus[4];          // Sprites bonus
    BITMAP *img_explosion;         // Sprite explosion
    BITMAP *img_trainee;           // Effet traînée
    BITMAP *img_checkpoint;        // Sprite checkpoint
    BITMAP *img_champi;            // Sprite champignon
    BITMAP *img_liane;             // Sprite liane
    BITMAP *img_poisson;           // Sprite poisson
    BITMAP *img_crabe;             // Sprite crabe
    BITMAP *roues[4];              // Sprites roues
    BITMAP *img_fin_mer;           // Image fin niveau mer

    // Éléments du jeu
    int timer_roues;               // Animation roues
    Roue roues_struct[NB_ROUES];   // Instances roues
    Checkpoint checkpoints[NB_CHECKPOINTS];  // Checkpoints
    champi champis[NB_CHAMPI];               // Champignons
    liane lianes[NB_LIANE];                  // Lianes
    poisson poissons[NB_POISSON];            // Poissons
    crabe crabes[NB_CRABE];                  // Crabes

    // Sons
    SAMPLE *musique_niveau;        // Musique niveau
    SAMPLE *son_saut;              // Son saut
    SAMPLE *son_explosion;         // Son explosion
    SAMPLE *musique_menu;          // Musique menu
    SAMPLE *musique_jeu;           // Musique jeu
    SAMPLE *son_checkpoint;        // Son checkpoint

    // Gestion des bonus
    float facteur_perso;           // Facteur taille (0.6-1.5)
    int temps_bonus[3];            // Durée restante bonus
    int bonus_pos[NB_BONUS_TYPES][NB_BONUS_PAR_TYPE][2];  // Positions
    int bonus_actifs[NB_BONUS_TYPES][NB_BONUS_PAR_TYPE];  // États
    int bonus_collision[NB_BONUS_TYPES][NB_BONUS_PAR_TYPE]; // Collisions des bonus
    int temps_bonus_vite;          // Durée bonus vitesse
    int vitesse_scroll;            // Vitesse défilement
    Bonus bonus[MAX_BONUS];        // Liste bonus
    int nb_bonus;                  // Nombre bonus actifs
    int invincible_aux_lianes;     // Invincibilité lianes
    int temps_invincible_lianes;   // Durée invincibilité
} EtatJeu;



// Ajouter le prototype de fonction
void gestion_collision_champis(EtatJeu *etat);
void gestion_collision_lianes(EtatJeu *etat);

// --- Fonctions principales ---
// --- Fonctions principales ---
void initialisation_allegro();
void init_jeu(EtatJeu *etat, TypeNiveau niveau, const char *pseudo);
void jeu_scrolling(const char *pseudo, TypeNiveau niveau, int niveau_max_debloque,
                   int dernier_cp, int scroll_cp, int partie_chargee, int temps_jeu,
                   SAMPLE *lave, SAMPLE *menu, SAMPLE *montagne, SAMPLE *mer);
void menu_principal(SAMPLE *lave, SAMPLE *menu, SAMPLE* montagne, SAMPLE* mer);
void charger_ressources_niveau(EtatJeu *etat);

void nettoyer_ressources(EtatJeu *etat);
// --- Affichage ---
void afficher_scene(EtatJeu *etat);

// --- Gestion du joueur / actions ---
void gerer_saut(EtatJeu *etat);
void appliquer_physique(EtatJeu *etat);
void gerer_collisions(EtatJeu *etat);
void gestion_collision_crabe(EtatJeu *etat);
void gestion_collision_poisson(EtatJeu *etat);

// --- Roues (affichage, animation, collisions) ---
void gerer_roues(int *etape_roue, int *dernier_changement_roue, int temps_actuel); // version simple
void maj_roues(EtatJeu *etat);
void gestion_collision_roues(EtatJeu *etat);

int verifier_collision_roue(Joueur *joueur, BITMAP *roue, int roue_x, int roue_y, int decor_scroll);

// --- Checkpoints ---
void maj_checkpoints(EtatJeu *etat);
int joueur_sur_checkpoint(Joueur *joueur, int cp_x, int cp_y, int scroll, int sw, int sh);

// --- Arrivée / victoire ---
int detecter_arrivee(EtatJeu *etat);

// --- Utilitaire ---

int collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2);
void initialisation_audio();
SAMPLE* charger_musique(const char* path);
void jouer_musique(SAMPLE* musique, int loop);
void arreter_musique();
void sauvegarder_partie(const char *pseudo, int niveau_max_debloque, int dernier_cp, int temps_jeu, EtatJeu *etat);
int charger_partie(const char *pseudo, int *niveau_max_debloque, int *dernier_cp, int *temps_jeu, int *scroll_cp);

#endif // BADLAND_H
