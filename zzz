#ifndef BADLAND_H
#define BADLAND_H

#include <allegro.h>
#include <math.h>

#define MY_SCREEN_W 800       // Largeur fenêtre
#define MY_SCREEN_H 600       // Hauteur fenêtre
#define FIN_MER_X 9450        // Position X fin du niveau mer
#define FIN_MER_Y 150         // Position Y fin du niveau mer
#define SCENE_WIDTH 13500     // Largeur totale du niveau
#define DECOR_SCROLL_SPEED 3  // Vitesse de défilement par défaut

#define GRAVITY 1             // Force de gravité
#define JUMP_STRENGTH -11     // Puissance de saut
#define NB_CHAMPI 4           // Nombre de champignons
#define NB_LIANE 4            // Nombre de lianes
#define MAX_NAME_LENGTH 30    // Taille max nom joueur
#define SAVE_FILE "save.txt"  // Fichier de sauvegarde
#define NB_CHECKPOINTS 4      // Nombre de checkpoints
#define NB_ROUES 5           // Nombre de roues/enemies
#define NB_BONUS_TYPES 4     // Types de bonus (Gros, Petit, Vite, Invincible)
#define NB_BONUS_PAR_TYPE 3  // Instances de chaque bonus
#define NB_POISSON 4         // Nombre de poissons ennemis
#define NB_CRABE 7           // Nombre de crabes ennemis

#define COLLISION_RADIUS 18   // Rayon de collision



// Enumération des types de niveaux
typedef enum {
    NIVEAU_VOLCAN,
    NIVEAU_MONTAGNE,
    NIVEAU_MER,
    NB_NIVEAUX
} TypeNiveau;

// Structure du joueur principal
typedef struct {
    int x, y;                 // Position
    int dx, dy;               // Vitesse
    int largeur, hauteur;     // Dimensions
    char nom[MAX_NAME_LENGTH];// Nom du joueur
    int niveau;               // Niveau actuel (TypeNiveau)
    int bonus_vite_actif;     // Bonus vitesse activé
    int sprite_state;         // État sprite (0=normal, 1=saut)
} Joueur;

// Structure pour les roues/enemies animés
typedef struct {
    int x, y;                // Position
    int frame;               // Frame d'animation
    int sens_vertical;       // Direction (1=descend, -1=monte)
    int limite_haut;         // Limite haute
    int limite_bas;          // Limite basse
} Roue;

// Structure pour les checkpoints
typedef struct {
    int x, y, scroll;        // Position
    int actif;               // Activation
} Checkpoint;

// Structures simples pour les éléments interactifs
typedef struct { int x, y, scroll; } champi;   // Champignons
typedef struct { int x, y, scroll; } liane;    // Lianes
typedef struct { int x, y, scroll; } poisson;  // Poissons ennemis
typedef struct { int x, y, scroll; } crabe;    // Crabes ennemis

// Structure des ressources graphiques par niveau
typedef struct {
    // Chemins des assets
    char* fond_path;           // Fond du niveau
    char* collision_path;      // Carte de collision
    char* sprite1_path;        // Sprite joueur normal
    char* sprite2_path;        // Sprite joueur saut
    char* img_vite_path;       // Bonus vitesse
    char* img_gros_path;      // Bonus taille gros
    char* explosion_path;      // Animation explosion
    char* champi_path;         // Sprite champignon
    char* liane_path;          // Sprite liane
    char* poisson_path;        // Sprite poisson
    char* crabe_path;          // Sprite crabe
    char* img_invincible_path; // Bonus invincibilité
    char* trainee_path;        // Effet de traînée
    char* img_petit_path;      // Bonus taille petit
    char* img_fin_path;        // Image de fin de niveau

    // Positions des éléments
    int positions_champi[NB_CHAMPI][2];  // Positions champignons
    int positions_liane[NB_LIANE][2];    // Positions lianes
    int positions_poisson[NB_POISSON][2];// Positions poissons
    int positions_crabe[NB_CRABE][2];    // Positions crabes

    // Positions des bonus
    int gros_positions[3][2];   // Positions bonus gros
    int petit_positions[3][2];  // Positions bonus petit
    int vite_positions[3][2];   // Positions bonus vitesse

    // Quantités réelles
    int nb_gros;                // Nombre de bonus gros
    int nb_petit;               // Nombre de bonus petit
    int nb_vite;                // Nombre de bonus vitesse

    // Autres ressources
    char* roues_paths[4];       // Sprites des roues
    char* checkpoint_path;      // Sprite checkpoint
    char* musique_path;         // Musique du niveau

    // Positions
    int positions_cp[NB_CHECKPOINTS][2];  // Positions checkpoints
    Roue roues_positions[NB_ROUES];       // Positions roues
} NiveauRessources;

// Structure pour les bonus
typedef struct {
    int x, y;        // Position
    int actif;       // Activation
    int type;        // Type (0=gros, 1=petit, 2=vite)
} Bonus;

#define MAX_BONUS 10  // Nombre max de bonus par niveau

// État global du jeu
typedef struct {
    Joueur joueur;                 // Données joueur
    TypeNiveau niveau_actuel;      // Niveau courant
    int decor_scroll;              // Position défilement
    int temps_jeu;                 // Chrono jeu
    int dernier_cp;                // Dernier checkpoint
    int joueur_est_mort;           // État vie/mort
    int positions_cp[NB_CHECKPOINTS][2];  // Positions checkpoints
    int position_champi[NB_CHAMPI][2];    // Positions champignons
    int position_liane[NB_LIANE][2];      // Positions lianes
    int position_poisson[NB_POISSON][2];  // Positions poissons
    int position_crabe[NB_CRABE][2];      // Positions crabes
    int timer_saut;                // Compteur saut
    int temps_trainee;             // Compteur traînée
    int temps_depart;              // Temps départ niveau

    // Ressources graphiques chargées
    BITMAP *fond;                  // Fond du niveau
    BITMAP *page;                  // Buffer d'affichage
    BITMAP *collision_map;         // Carte collisions
    BITMAP *sprite_joueur[2];      // Sprites joueur
    BITMAP *img_bonus[4];          // Sprites bonus
    BITMAP *img_explosion;         // Sprite explosion
    BITMAP *img_trainee;           // Effet traînée
    BITMAP *img_checkpoint;        // Sprite checkpoint
    BITMAP *img_champi;            // Sprite champignon
    BITMAP *img_liane;             // Sprite liane
    BITMAP *img_poisson;           // Sprite poisson
    BITMAP *img_crabe;             // Sprite crabe
    BITMAP *roues[4];              // Sprites roues
    BITMAP *img_fin_mer;           // Image fin niveau mer

    // Éléments du jeu
    int timer_roues;               // Animation roues
    Roue roues_struct[NB_ROUES];   // Instances roues
    Checkpoint checkpoints[NB_CHECKPOINTS];  // Checkpoints
    champi champis[NB_CHAMPI];               // Champignons
    liane lianes[NB_LIANE];                  // Lianes
    poisson poissons[NB_POISSON];            // Poissons
    crabe crabes[NB_CRABE];                  // Crabes

    // Sons
    SAMPLE *musique_niveau;        // Musique niveau
    SAMPLE *son_saut;              // Son saut
    SAMPLE *son_explosion;         // Son explosion
    SAMPLE *musique_menu;          // Musique menu
    SAMPLE *musique_jeu;           // Musique jeu
    SAMPLE *son_checkpoint;        // Son checkpoint

    // Gestion des bonus
    float facteur_perso;           // Facteur taille (0.6-1.5)
    int temps_bonus[3];            // Durée restante bonus
    int bonus_pos[NB_BONUS_TYPES][NB_BONUS_PAR_TYPE][2];  // Positions
    int bonus_actifs[NB_BONUS_TYPES][NB_BONUS_PAR_TYPE];  // États
    int bonus_collision[NB_BONUS_TYPES][NB_BONUS_PAR_TYPE]; // Collisions des bonus
    int temps_bonus_vite;          // Durée bonus vitesse
    int vitesse_scroll;            // Vitesse défilement
    Bonus bonus[MAX_BONUS];        // Liste bonus
    int nb_bonus;                  // Nombre bonus actifs
    int invincible_aux_lianes;     // Invincibilité lianes
    int temps_invincible_lianes;   // Durée invincibilité
} EtatJeu;


// Ajouter le prototype de fonction

// --- Fonctions principales ---
// --- Fonctions principales ---


// Paramètres : aucun
// Fonctionnement : Initialise tous les composants d'Allegro nécessaires au jeu
// return  : void
void initialisation_allegro();

// Paramètres :
/*
structure d'état du jeu : EtatJeu *etat
type de niveau à charger : TypeNiveau niveau
nom du joueur : const char *pseudo
*/
// Fonctionnement : Initialise un nouveau niveau avec les paramètres donnés
// return  : void
void init_jeu(EtatJeu *etat, TypeNiveau niveau, const char *pseudo);


// Paramètres :
/*
nom du joueur : const char *pseudo
niveau actuel : TypeNiveau niveau
niveau maximal débloqué : int niveau_max_debloque
position du dernier checkpoint : int dernier_cp
position de défilement : int scroll_cp
indicateur de partie chargée : int partie_chargee
temps de jeu écoulé : int temps_jeu
sons des différents niveaux : SAMPLE *lave, *menu, *montagne, *mer
*/
// Fonctionnement : Gère la boucle principale du jeu avec mécanique de scrolling
// return  : void
void jeu_scrolling(const char *pseudo, TypeNiveau niveau, int niveau_max_debloque,
                   int dernier_cp, int scroll_cp, int partie_chargee, int temps_jeu,
                   SAMPLE *lave, SAMPLE *menu, SAMPLE *montagne, SAMPLE *mer);

// Paramètres :
/*
sons des différents écrans : SAMPLE *lave, *menu, *montagne, *mer
*/
// Fonctionnement : Affiche et gère les interactions du menu principal
// return  : void
void menu_principal(SAMPLE *lave, SAMPLE *menu, SAMPLE* montagne, SAMPLE* mer);

// Paramètres :
/*
structure d'état du jeu : EtatJeu *etat
*/
// Fonctionnement : Charge toutes les ressources graphiques et sonores du niveau actuel
// return  : void
void charger_ressources_niveau(EtatJeu *etat);


// Paramètres :
/*
état du jeu à nettoyer : EtatJeu *etat
*/
// Fonctionnement : Libère toutes les ressources mémoire allouées (graphiques, sons, etc.)
// Ce que ça renvoie : void
void nettoyer_ressources(EtatJeu *etat);

// --- Affichage ---

// Paramètres :
/*
état du jeu à afficher : EtatJeu *etat
*/
// Fonctionnement : Affiche l'ensemble des éléments graphiques de la scène de jeu
// Ce que ça renvoie : void
void afficher_scene(EtatJeu *etat);


// --- Gestion du joueur / actions ---


// Paramètres :
/*
pointeur vers la structure du jeu (EtatJeu *etat)
*/

// Fonctionnement :
/*
Vérifie si une touche est enfoncée.
Si la barre espace est détectée :
active l'état de saut du joueur (sprite_state = 1)
initialise un timer de saut à 10
applique une force de saut verticale (dy = JUMP_STRENGTH)
déclenche un effet visuel (traînée)
joue le son de saut si disponible
Décrémente le timer de saut à chaque appel
Une fois le timer expiré, désactive l'état de saut (sprite_state = 0)
*/

// Effet :
/*
modifie l’état du joueur et déclenche un son.
*/
void gerer_saut(EtatJeu *etat);


// Paramètres :
/*
pointeur vers la structure du jeu (EtatJeu *etat)
*/

// Fonctionnement :
/*
Applique la gravité au joueur en augmentant sa vitesse verticale (dy).
Limite la vitesse de chute pour éviter qu'elle dépasse une valeur maximale.
Si le joueur a une vitesse horizontale (dx ≠ 0) :
déplace le joueur horizontalement.
applique un effet de frottement (réduction progressive de dx).
si dx devient très faible, il est mis à zéro pour stopper le mouvement.
*/

// Effet :
/*
 modifie la position et les vitesses du joueur.
*/
void appliquer_physique(EtatJeu *etat);


// Paramètres :
/*
pointeur vers la structure du jeu (EtatJeu *etat)
*/

// Fonctionnement :
/*
Teste la possibilité de déplacer le joueur vers la droite (collision horizontale) :
    Si aucun pixel noir n’est détecté dans la zone future, avance le joueur.
    Sinon, le repousse vers la gauche jusqu’à sortir de l’obstacle.
 Teste la possibilité de monter ou descendre selon la vitesse verticale (collision verticale) :
    Si aucun pixel noir sur le chemin, déplace le joueur verticalement.
    Sinon, stoppe la vitesse verticale (dy = 0).
 Applique des limites supplémentaires :
    Empêche de dépasser le haut ou le bas de l’écran.
    Empêche de sortir trop à gauche (x < -100).
*/

// Effet :
/*
ajuste dynamiquement la position du joueur en fonction des collisions avec les éléments du décor.
*/
void gerer_collisions(EtatJeu *etat);


// --- Roues (affichage, animation, collisions) ---
// Paramètres :
/*
  - int *etape_roue : pointeur vers la BITMAP actuelle des roues (image de 0 à 3)
  - int *dernier_changement_roue : pointeur vers le temps du dernier changement d'étape
  - int temps_actuel : temps écoulé depuis le début du jeu
*/
// Fonctionnement : Gère l'animation cyclique simple des roues selon le temps
// return  : void
void gerer_roues(int *etape_roue, int *dernier_changement_roue, int temps_actuel);

// Paramètres :
/*
  - EtatJeu *etat : pointeur vers l'état actuel du jeu
*/
// Fonctionnement : Met à jour l'animation des roues ainsi que leur éventuel mouvement vertical.
// return  : void
void maj_roues(EtatJeu *etat);


void gestion_collision_roues(EtatJeu *etat);

// Paramètres :
/*
Joueur *joueur : pointeur vers la structure du joueur
BITMAP *roue : image de la roue utilisée pour la collision
int roue_x : position X de la roue
int roue_y : position Y de la roue
int decor_scroll : décalage horizontal actuel du décor (scroll)
*/
// Fonctionnement :
/*Vérifie s'il y a une collision entre le joueur et la roue.*/
// return  :
/*int (1 s’il y a collision, 0 sinon)*/
int verifier_collision_roue(Joueur *joueur, BITMAP *roue, int roue_x, int roue_y, int decor_scroll);

// --- Checkpoints ---

// Paramètres :
/*
pointeur vers la structure du jeu (EtatJeu *etat)
*/

// Fonctionnement :
/*
Parcourt tous les checkpoints du jeu.
Pour chaque checkpoint inactif :
vérifie si le joueur est dans sa zone (collision AABB via joueur_sur_checkpoint).
Si le joueur touche un checkpoint :
enregistre la position du joueur et le scroll courant dans le checkpoint
active le checkpoint
met à jour l’indice du dernier checkpoint atteint
joue un son d’activation si disponible
*/

// return :
/*
Effet :
met à jour les champs liés aux checkpoints dans l’état du jeu.
*/
void maj_checkpoints(EtatJeu *etat);

// Paramètres :
/*
pointeur vers la structure du joueur (position, taille) : Joueur *joueur
coordonnées du checkpoint dans le monde : int cp_x, cp_y
défilement horizontal du décor : int scroll
dimensions de la zone du checkpoint :int cp_width, cp_height
 */

// Fonctionnement :
/*
Calcule la boîte englobante (AABB) du joueur.
Calcule la boîte englobante du checkpoint, ajustée avec le scroll.
Utilise un test de collision AABB (rectangle contre rectangle).
Retourne 1 si collision (le joueur est sur le checkpoint), 0 sinon.
 */

// return :
/*int  1 si le joueur est dans la zone du checkpoint, 0 sinon.*/
int joueur_sur_checkpoint(Joueur *joueur, int cp_x, int cp_y, int scroll, int sw, int sh);




// --- Arrivée / victoire ---

// Paramètres :
/*
état du jeu : EtatJeu *etat
*/
// Fonctionnement : Vérifie si le joueur a atteint la zone d'arrivée/objectif
// Ce que ça renvoie : 1 si le joueur est arrivé, 0 sinon
int detecter_arrivee(EtatJeu *etat);


// Gestion de toutes les collisions

// Paramètres d'entrées :
/*
Pointeur vers une structure contenant l’état actuel du jeu. Elle inclut :
La position et la taille du joueur (etat->joueur)
Le défilement horizontal du décor (etat->decor_scroll)
La liste des champignons (etat->champis)
Un indicateur de mort du joueur (etat->joueur_est_mort)
 */

// Fonctionnement :
/*
Calcule la position globale du joueur (avec défilement).
Parcourt chaque objet.
Crée une hitbox réduite et centrée pour chaque objet.
Teste la collision entre la hitbox du joueur et celle de l'objet.
Si collision : etat->joueur_est_mort est mis à 1 et la fonction s’arrête.
 */

//Gestion des collisions pour tous les champignons
void gestion_collision_champis(EtatJeu *etat);

//Gestion des collisions pour tous les lianes
void gestion_collision_lianes(EtatJeu *etat);

//Gestion des collisions pour tous les crabes
void gestion_collision_crabe(EtatJeu *etat);

//Gestion des collisions pour tous les poissons
void gestion_collision_poisson(EtatJeu *etat);

//Gestion des collisions pour tous les roues
void gestion_collision_roues(EtatJeu *etat);

// --- Utilitaire ---
// Paramètres :
/*
position et taille 1er rectangle : int x1,y1,w1,h1
position et taille 2nd rectangle : int x2,y2,w2,h2
*/
// Fonctionnement : Détecte la collision entre deux rectangles
// Ce que ça renvoie : 1 si collision, 0 sinon
int collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2);

// Paramètres : aucun
// Fonctionnement : Initialise le système audio Allegro
// Ce que ça renvoie : void
void initialisation_audio();

// Paramètres :
/*
chemin du fichier audio : const char* path
*/
// Fonctionnement : Charge un fichier audio en mémoire
// Ce que ça renvoie : SAMPLE* (pointeur sur échantillon) ou NULL si erreur
SAMPLE* charger_musique(const char* path);

// Paramètres :
/*
échantillon audio : SAMPLE* musique
mode de lecture : int loop (1=bouclé, 0=une fois)
*/
// Fonctionnement : Joue un échantillon sonore
// Ce que ça renvoie : void
void jouer_musique(SAMPLE* musique, int loop);

// Paramètres : aucun
// Fonctionnement : Arrête toute musique en cours de lecture
// Ce que ça renvoie : void
void arreter_musique();

// Paramètres :
/*
pseudo du joueur : const char *pseudo
niveau max atteint : int niveau_max_debloque
dernier checkpoint : int dernier_cp
temps de jeu : int temps_jeu
état du jeu : EtatJeu *etat
*/
// Fonctionnement : Sauvegarde la progression dans un fichier
// Ce que ça renvoie : void
void sauvegarder_partie(const char *pseudo, int niveau_max_debloque, int dernier_cp, int temps_jeu, EtatJeu *etat);

// Paramètres :
/*
pseudo du joueur : const char *pseudo
pointeur niveau max : int *niveau_max_debloque
pointeur dernier cp : int *dernier_cp
pointeur temps jeu : int *temps_jeu
pointeur position scroll : int *scroll_cp
*/
// Fonctionnement : Charge une partie depuis un fichier de sauvegarde
// Ce que ça renvoie : 1 si succès, 0 si échec
int charger_partie(const char *pseudo, int *niveau_max_debloque, int *dernier_cp, int *temps_jeu, int *scroll_cp);


#endif // BADLAND_H
