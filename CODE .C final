#include "Badland.h"
#include <stdio.h>
#include <string.h>
#include <time.h>

static SAMPLE *musique_actuelle = NULL;

void initialisation_allegro() {
    allegro_init();
    install_keyboard();
    install_mouse();
    install_sound(DIGI_AUTODETECT, MIDI_AUTODETECT, NULL);  // Initialisation audio
    set_color_depth(desktop_color_depth());
    if (set_gfx_mode(GFX_AUTODETECT_WINDOWED, MY_SCREEN_W, MY_SCREEN_H, 0, 0) != 0) {
        allegro_message("ProblÃ¨me mode graphique");
        exit(EXIT_FAILURE);
    }
    set_trans_blender(0, 0, 0, 128);
}



void arreter_musique() {
    if (musique_actuelle) {
        stop_sample(musique_actuelle);
        musique_actuelle = NULL;
    }
}



void init_jeu(Joueur *joueur, TypeNiveau niveau) {
    joueur->x = 100;
    joueur->y = MY_SCREEN_H / 2;
    joueur->largeur = 40;
    joueur->hauteur = 40;
    joueur->dy = 0;
    joueur->dx = 0;
}




int detecter_arrivee(BITMAP *map, int cx, int cy, int rayon, int scroll) {
    for (int dx = -rayon; dx <= rayon; dx++) {
        for (int dy = -rayon; dy <= rayon; dy++) {
            if (dx * dx + dy * dy <= rayon * rayon) {
                int x = cx + dx + scroll;
                int y = cy + dy;
                if (x >= 0 && x < map->w && y >= 0 && y < map->h) {
                    if (getpixel(map, x, y) == makecol(0, 255, 0)) return 1;
                }
            }
        }
    }
    return 0;
}

// 3. Animation des roues
void maj_roues(Roue roues[], int *timer) {
    (*timer)++;
    if (*timer % 6 == 0) {
        for (int i = 0; i < NB_ROUES; i++) {
            roues[i].frame = (roues[i].frame + 1) % 4;

            // Mouvement vertical simple
            if (roues[i].sens_vertical != 0) {
                roues[i].y += 6 * roues[i].sens_vertical;

                if (roues[i].y >= roues[i].limite_bas)
                    roues[i].sens_vertical = -1;
                else if (roues[i].y <= roues[i].limite_haut)
                    roues[i].sens_vertical = 1;
            }
        }
    }
}

// 4. Collision roue avec checkpoint
void gestion_collision_roues(Joueur *joueur, Roue roues[], int nb, int *decor_scroll,
                            Checkpoint checkpoints[], int dernier_cp, int *joueur_est_mort_ptr,
                            SAMPLE *menu, SAMPLE *lave) {
    const int rayon_collision = 90;  // Rayon "rÃ©aliste" de la roue

    // Centre du joueur (repÃ¨re global)
    int jx = joueur->x + *decor_scroll + joueur->largeur / 2;
    int jy = joueur->y + joueur->hauteur / 2;

    for (int i = 0; i < nb; i++) {
        int rx = roues[i].x;
        int ry = roues[i].y;

        int dx = jx - rx;
        int dy = jy - ry;
        int distance2 = dx * dx + dy * dy;

        if (distance2 < rayon_collision * rayon_collision) {
            if (dernier_cp != -1) {
                *joueur_est_mort_ptr = 1;
            } else {
                menu_principal(lave, menu);
            }
            return;
        }
    }
}



// 5. Checkpoints
int joueur_sur_checkpoint(Joueur *joueur, int cp_x, int cp_y, int scroll, int sw, int checkpoint_h) {
    const int CP_ZONE_LARGEUR = 130;
    const int CP_ZONE_HAUTEUR = 130;

    int jx1 = joueur->x;
    int jy1 = joueur->y;
    int jx2 = jx1 + joueur->largeur;
    int jy2 = jy1 + joueur->hauteur;

    int cx1 = cp_x - scroll+40;
    int cy1 = cp_y - checkpoint_h+40;  // ðŸ”„ correction ici
    int cx2 = cx1 + CP_ZONE_LARGEUR;
    int cy2 = cy1 + CP_ZONE_HAUTEUR;

    return !(jx2 < cx1 || jx1 > cx2 || jy2 < cy1 || jy1 > cy2);
}

void gestion_collision_champis(Joueur *joueur, champi champis[], int nb, int *decor_scroll,
                             Checkpoint checkpoints[], int dernier_cp, int *joueur_est_mort_ptr, SAMPLE* lave, SAMPLE* menu) {
    // Nouveau : collision par rectangle plutÃ´t que par cercle
    int joueur_x = joueur->x + *decor_scroll;
    int joueur_y = joueur->y;

    for (int i = 0; i < nb; i++) {
        // On considÃ¨re que les champignons ont une taille de 50x50 (Ã  ajuster)
        int champi_x = champis[i].x;
        int champi_y = champis[i].y;
        int champi_w = 50;
        int champi_h = 50;

        if (collision(joueur_x, joueur_y, joueur->largeur, joueur->hauteur,
                     champi_x, champi_y, champi_w, champi_h)) {
            if (dernier_cp != -1) {
                *joueur_est_mort_ptr = 1;
            } else {
                menu_principal(lave, menu);
                stop_sample(lave);

            }
            return;
                     }
    }
}

void maj_checkpoints(Joueur *joueur, Checkpoint checkpoints[], const int positions[][2], int *dernier_cp, int decor_scroll, BITMAP *sprite, BITMAP *img_checkpoint)
 {
    for (int i = 0; i < NB_CHECKPOINTS; i++) {
        if (!checkpoints[i].actif && joueur_sur_checkpoint(joueur, positions[i][0], positions[i][1], decor_scroll, sprite->w, img_checkpoint->h)) {
            checkpoints[i].x = joueur->x;
            checkpoints[i].y = joueur->y;
            checkpoints[i].scroll = decor_scroll;
            checkpoints[i].actif = 1;
            *dernier_cp = i;

        }
    }
}
void afficher_roues(BITMAP *page, BITMAP *roues[], Roue roues_struct[], int nb, int decor_scroll) {
    for (int i = 0; i < nb; i++) {
        BITMAP *roue = roues[roues_struct[i].frame];
        int x_affiche = roues_struct[i].x - decor_scroll - roue->w / 2;
        int y_affiche = roues_struct[i].y - roue->h / 2;
        draw_sprite(page, roue, x_affiche, y_affiche);
    }
}

void gerer_saut(Joueur *joueur, int *sprite_state, int *timerinterne, int *temps_trainee) {
    if (keypressed() && (readkey() >> 8) == KEY_SPACE) {
        *sprite_state = 1;
        *timerinterne = 10;
        joueur->dy = JUMP_STRENGTH;
        *temps_trainee = 200;
    }
    if (*timerinterne > 0) {
        (*timerinterne)--;
        if (*timerinterne == 0) *sprite_state = 0;
    }

}

void appliquer_physique(Joueur *joueur) {
    joueur->dy += GRAVITY;
}

int verifier_collision_roue(Joueur *joueur, BITMAP *roue, int roue_x, int roue_y, int decor_scroll) {
    int roue_largeur = roue->w;
    int roue_hauteur = roue->h;
    int roue_x_ecran = roue_x - decor_scroll;

    return collision(joueur->x, joueur->y, joueur->largeur, joueur->hauteur,
                     roue_x_ecran, roue_y, roue_largeur, roue_hauteur);
}

void gerer_collisions(Joueur *joueur, BITMAP *collision_map, int decor_scroll) {
    // Horizontal
    int try_x = joueur->x + 1;
    int can_move_x = 1;
    for (int i = 0; i < joueur->largeur && can_move_x; i++) {
        for (int j = 0; j < joueur->hauteur; j++) {
            int gx = try_x + i + decor_scroll;
            int gy = joueur->y + j;
            if (gx < collision_map->w && gy < collision_map->h &&
                getpixel(collision_map, gx, gy) == makecol(0, 0, 0)) {
                can_move_x = 0;
                break;
            }
        }
    }
    if (can_move_x && joueur->x < MY_SCREEN_W / 3) {
        joueur->x += 1;
    }
    else {
        int pushed;
        do {
            pushed = 0;
            for (int i = 0; i < joueur->largeur && !pushed; i++) {
                for (int j = 0; j < joueur->hauteur && !pushed; j++) {
                    int gx = joueur->x + i + decor_scroll;
                    int gy = joueur->y + j;
                    if (gx < collision_map->w && gy < collision_map->h &&
                        getpixel(collision_map, gx, gy) == makecol(0, 0, 0)) {
                        joueur->x -= 1;
                        pushed = 1;
                    }
                }
            }
        } while (pushed && joueur->x > -100);  // Autorise une sortie raisonnable
    }

    // Vertical
    int try_y = joueur->y + joueur->dy;
    int can_move_y = 1;
    for (int i = 0; i < joueur->largeur && can_move_y; i++) {
        for (int j = 0; j < joueur->hauteur; j++) {
            int gx = joueur->x + i + decor_scroll;
            int gy = try_y + j;
            if (gx < collision_map->w && gy < collision_map->h &&
                getpixel(collision_map, gx, gy) == makecol(0, 0, 0)) {
                can_move_y = 0;
                break;
            }
        }
    }
    if (can_move_y) joueur->y += joueur->dy;
    else joueur->dy = 0;

    // Limites verticales
    if (joueur->y < 10) {
        joueur->y = 10;
        joueur->dy = 0;
    }
    if (joueur->y + joueur->hauteur > MY_SCREEN_H - 10) {
        joueur->y = MY_SCREEN_H - joueur->hauteur - 10;
        joueur->dy = 0;
    }

    // Protection minimale Ã  gauche
    if (joueur->x < -100) joueur->x = -100;
}


int collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2) {
    return x1 + w1 > x2 && x1 < x2 + w2 && y1 + h1 > y2 && y1 < y2 + h2;
}

void afficher_scene(BITMAP *page, BITMAP *fond, BITMAP *sprite1, BITMAP *sprite2,
                    BITMAP *roues[], Roue roues_struct[], int nb_roues, Joueur *joueur, int sprite_state,
                    float facteur_perso, int decor_scroll, int temps_actuel,
                    int afficher_gros, int gros_collision, BITMAP *img_gros,
                    int gros_x, int gros_y, int afficher_petit, int petit_collision, BITMAP *img_petit,
                    int petit_x, int petit_y, int afficher_vite, int vite_collision, BITMAP *img_vite,
                    int vite_x, int vite_y, BITMAP *img_checkpoint, Checkpoint checkpoints[],
                    const int positions_cp[][2], BITMAP *img_trainee, int temps_trainee,
                    BITMAP *img_champi, const int position_champi[][2]){

    clear_bitmap(page);
    blit(fond, page, decor_scroll, 0, 0, 0, MY_SCREEN_W, MY_SCREEN_H);

    afficher_roues(page, roues, roues_struct, nb_roues, decor_scroll);

    // Affichage des checkpoints inactifs
    for (int i = 0; i < NB_CHECKPOINTS; i++) {
        int x_affiche = positions_cp[i][0] - decor_scroll;
        int y_affiche = positions_cp[i][1] - img_checkpoint->h;
        rect(page, x_affiche, y_affiche, x_affiche+170, y_affiche+170, makecol(255, 0, 0)); // rouge = hitbox
        if (checkpoints[i].actif) {
            draw_trans_sprite(page, img_checkpoint, x_affiche, y_affiche);
        } else {
            draw_sprite(page, img_checkpoint, x_affiche, y_affiche);
        }
    }

    for (int i = 0; i < NB_CHAMPI; i++) {
        int x_affiche = position_champi[i][0] - decor_scroll;
        int y_affiche = position_champi[i][1];
        draw_sprite(page, img_champi, x_affiche, y_affiche);

        // DEBUG - Afficher la hitbox
        rect(page, x_affiche, y_affiche,
             x_affiche + 50, y_affiche + 50,
             makecol(255, 0, 0));
    }

    // Objets spÃ©ciaux
    if (afficher_gros && !gros_collision) {
        draw_sprite(page, img_gros, gros_x - decor_scroll, gros_y);
    }
    if (afficher_petit && !petit_collision) {
        draw_sprite(page, img_petit, petit_x - decor_scroll, petit_y);
    }
    if (afficher_vite && !vite_collision) {
        draw_sprite(page, img_vite, vite_x - decor_scroll, vite_y);
    }



    if (temps_trainee > 0) {
        int x_trainee = joueur->x - img_trainee->w + 30;
        int y_trainee = joueur->y + joueur->hauteur / 2 - img_trainee->h / 2 + 40;
        draw_sprite(page, img_trainee, x_trainee, y_trainee);
    }

    // Joueur
    BITMAP *sprite = sprite_state ? sprite2 : sprite1;
    int largeur = joueur->largeur;
    int hauteur = joueur->hauteur;
    stretch_sprite(page, sprite, joueur->x, joueur->y, largeur, hauteur);

    // Temps
    char buffer[50];
    sprintf(buffer, "Temps : %d s", temps_actuel);
    textout_ex(page, font, buffer, 10, 10, makecol(255, 255, 255), -1);

    // Affichage final
    blit(page, screen, 0, 0, 0, 0, MY_SCREEN_W, MY_SCREEN_H);
}

void nettoyer_ressources(BITMAP *fond, BITMAP *collision_map, BITMAP *sprite1,
                         BITMAP *sprite2, BITMAP *img_gros, BITMAP *img_petit,
                         BITMAP *roues[], BITMAP *page, BITMAP *img_champi) {
    if (fond) destroy_bitmap(fond);
    if (collision_map) destroy_bitmap(collision_map);
    if (sprite1) destroy_bitmap(sprite1);
    if (sprite2) destroy_bitmap(sprite2);
    if (img_gros) destroy_bitmap(img_gros);
    if (img_petit) destroy_bitmap(img_petit);
    if (img_champi) destroy_bitmap(img_champi);
    if (page) destroy_bitmap(page);
    for (int i = 0; i < 4; i++) {
        if (roues[i]) destroy_bitmap(roues[i]);
    }


}




void initialiser_ressources_niveaux(NiveauRessources *niveaux) {
    // Niveau Volcan
    niveaux[NIVEAU_VOLCAN] = (NiveauRessources){
        .fond_path = "grotte_lave.bmp",
        .collision_path = "grotte_lave_colli.bmp",
        .sprite1_path = "personnage1.bmp",
        .sprite2_path = "personnage2.bmp",
        .img_gros_path = "gros.bmp",
        .img_petit_path = "petit.bmp",
        .explosion_path = "explosion_lave.bmp",
        .champi_path = "champignon.bmp",
        .positions_champi = {{20000, 0}, {20000, 0}, {20000, 0}, {20000, 0}}, // Positions par dÃ©faut
        .trainee_path = "saut.bmp",
        .img_vite_path = "vite.bmp",
        .musique_path = "lave.wav",
        .checkpoint_path = "checkpoint.bmp",
        .roues_paths = {"roue0.bmp", "roue1.bmp", "roue2.bmp", "roue3.bmp"},
        .positions_cp = {{1583, 571}, {3500, 590}, {5670, 600}, {7650, 570}},
        .roues_positions = {{3530, 170,0},
        {4600, 390,0},
        {6550, 130,0},
        {6550, 420,0},{8000, 420,0}}
    };

    // Niveau Montagne (chemins diffÃ©rents)

    niveaux[NIVEAU_MONTAGNE] = (NiveauRessources){
        .fond_path = "foret.bmp",
        .collision_path = "foret_colli.bmp",
        .sprite1_path = "personnage1.bmp",
        .sprite2_path = "personnage2.bmp",
        .img_vite_path = "vite.bmp",
        .champi_path = "champignon.bmp",
        .positions_champi = {{2058, 416}, {4524, 456}, {6400, 334}, {8420, 340}},
        .musique_path = "montagne.wav",
        .img_gros_path = "gros.bmp",
        .img_petit_path = "petit.bmp",
        .explosion_path = "explosion_foret.bmp",
        .trainee_path = "saut2.bmp",
        .checkpoint_path = "checkpoint2.bmp",
        .roues_paths = {"roue0.bmp", "roue1.bmp", "roue2.bmp", "roue3.bmp"},
        .positions_cp = {{600, 250}, {2400, 270}, {4000, 260}, {5300, 280}},
        .roues_positions = {{20000, 170,0},
        {20000, 390,0},
        {20000, 130,0},
        {20000, 420,0},{20000, 420,0}}
    };


    // Niveau Mer (chemins diffÃ©rents)
    niveaux[NIVEAU_MER] = (NiveauRessources){
        .fond_path = "mer_fond.bmp",
        .collision_path = "mer_colli.bmp",
        .sprite1_path = "perso_mer1.bmp",
        .sprite2_path = "perso_mer2.bmp",
        .img_vite_path = "vite.bmp",
        .champi_path = "champignon.bmp",
        .positions_champi = {{0, 0}, {0, 0}, {0, 0}, {0, 0}}, // Positions par dÃ©faut
        .musique_path = "mer.wav",
        .explosion_path = "explosion_foret.bmp",
        .trainee_path = "saut2.bmp",
        .img_gros_path = "gros_mer.bmp",
        .img_petit_path = "petit_mer.bmp",
        .checkpoint_path = "checkpoint_mer.bmp",
        .roues_paths = {"roue_mer0.bmp", "roue_mer1.bmp", "roue_mer2.bmp", "roue_mer3.bmp"},
        .positions_cp = {{550, 320}, {2350, 340}, {3750, 330}, {5250, 350}},
        .roues_positions = {{0, 0, 0}}
    };
}

void afficher_mort(BITMAP *page, BITMAP *img_explosion, Joueur *joueur) {
    int x = joueur->x + joueur->largeur / 2 - img_explosion->w / 2;
    int y = joueur->y + joueur->hauteur / 2 - img_explosion->h / 2;
    draw_sprite(page, img_explosion, x, y);
}
void jeu_scrolling(const char *pseudo, TypeNiveau niveau, SAMPLE* lave, SAMPLE* menu) {
    // ... variables existantes ...
    SAMPLE *musique_niveau;
    int afficher_vite = 0, vite_collision = 0;
    int vite_x = 1000, vite_y = 350;
    int vitesse_scroll = DECOR_SCROLL_SPEED;
    int temps_bonus_vite = 0;
    int positions_cp[NB_CHECKPOINTS][2];
    int position_champi[NB_CHAMPI][2];
    champi champis[NB_CHAMPI];
    Joueur joueur;
    init_jeu(&joueur, niveau);
    strcpy(joueur.nom, pseudo);
    joueur.niveau = niveau;

    //VÃ©rifiez que niveau est valide
        if (niveau < 0 || niveau >= NB_NIVEAUX) {
            return;
        }
    // Variables de dÃ©filement et de temps
    int decor_scroll = 0;
    int temps_depart = clock();

    // CrÃ©ation de la page de dessin
    BITMAP *page = create_bitmap(MY_SCREEN_W, MY_SCREEN_H);


    // Chargement des ressources spÃ©cifiques au niveau
    BITMAP *fond, *collision_map, *sprite1, *sprite2, *img_gros, *img_petit,*img_explosion, *img_trainee, *img_checkpoint, *img_vite, *img_champi;
    BITMAP *roues[4];
    // Initialisation des roues
    Roue roues_struct[NB_ROUES];
    Checkpoint checkpoints[NB_CHECKPOINTS];

    charger_ressources_niveau(niveau, &fond, &collision_map, &sprite1, &sprite2,
                           &img_gros, roues, &img_petit, &img_explosion, &img_trainee, &img_checkpoint,
                           roues_struct, checkpoints, positions_cp, &img_vite, &musique_niveau,&img_champi,position_champi, champis);




    for (int i = 0; i < NB_ROUES; i++) {
        roues_struct[i].frame = 0;
    }

    // Initialisation des checkpoints

    int dernier_cp = -1;

    // Variables pour l'animation et l'Ã©tat du joueur
    int timer_roues = 0;
    int sprite_state = 0;
    int timerinterne = 0;
    float facteur_perso = 1.0;

    // Variables pour les objets spÃ©ciaux
    int afficher_gros = 0, afficher_petit = 0;
    int gros_collision = 0, petit_collision = 0;
    int gros_x = 1500, gros_y = 300;
    int petit_x = 2000, petit_y = 350;


    int joueur_est_mort = 0;     // 0 = vivant, 1 = explosion, 2 = attente
    int explosion_affichee = 0;
    int temps_mort = 0;
    int temps_trainee = 0;


    // Boucle principale du jeu
    while (!key[KEY_ESC]) {
        stop_sample(musique_niveau);
        int temps_actuel = (clock() - temps_depart) / CLOCKS_PER_SEC;
        if (joueur_est_mort == 1) {
            if (!explosion_affichee) {
                afficher_scene(page, fond, sprite1, sprite2,
                               roues, roues_struct, NB_ROUES, &joueur, sprite_state,
                               facteur_perso, decor_scroll, temps_actuel,
                               afficher_gros, gros_collision, img_gros, gros_x, gros_y,
                               afficher_petit, petit_collision, img_petit, petit_x, petit_y, afficher_vite, vite_collision, img_vite, vite_x, vite_y,
                               img_checkpoint, checkpoints, positions_cp,
                               img_trainee, temps_trainee, img_champi, position_champi);

                afficher_mort(page, img_explosion, &joueur);
                blit(page, screen, 0, 0, 0, 0, MY_SCREEN_W, MY_SCREEN_H);

                explosion_affichee = 1;
                temps_mort = clock();
            }

            if ((clock() - temps_mort) >= 1000) {
                joueur_est_mort = 2;
                explosion_affichee = 0;
            } else {
                rest(20);
                continue;
            }
        }

        // PHASE 2 : Message et repositionnement
        if (joueur_est_mort == 2) {

            if (dernier_cp != -1) {
                joueur.x = checkpoints[dernier_cp].x;
                joueur.y = checkpoints[dernier_cp].y;
                decor_scroll = checkpoints[dernier_cp].scroll;
                joueur.dx = joueur.dy = 0;
                joueur_est_mort = 0;
            } else {
                stop_sample(musique_niveau);  // ArrÃªt supplÃ©mentaire pour Ãªtre sÃ»r
                stop_sample(lave);
                menu_principal(lave, menu);
                return;
            }
            continue;
        }

        // Mise Ã  jour des roues
        maj_roues(roues_struct, &timer_roues);

        // Gestion des collisions avec les roues
        gestion_collision_roues(&joueur, roues_struct, NB_ROUES, &decor_scroll,
                       checkpoints, dernier_cp, &joueur_est_mort, menu, lave);

        // Mise Ã  jour des checkpoints
        maj_checkpoints(&joueur, checkpoints, positions_cp, &dernier_cp, decor_scroll, sprite1, img_checkpoint);


        // DÃ©tection de l'arrivÃ©e
        if (detecter_arrivee(collision_map, joueur.x + decor_scroll, joueur.y, COLLISION_RADIUS, 0)) {
            break;
        }

        if (niveau == NIVEAU_MONTAGNE) {
            gestion_collision_champis(&joueur, champis, NB_CHAMPI, &decor_scroll,
                                   checkpoints, dernier_cp, &joueur_est_mort, lave, menu);
        }


        // Gestion du saut
        gerer_saut(&joueur, &sprite_state, &timerinterne, &temps_trainee);

        // Application de la physique
        appliquer_physique(&joueur);

        // Gestion des collisions avec le dÃ©cor
        gerer_collisions(&joueur, collision_map, decor_scroll);

        // VÃ©rification des limites de l'Ã©cran
        if (joueur.x + joueur.largeur < 0) {
            if (dernier_cp != -1) {
                joueur.x = checkpoints[dernier_cp].x;
                joueur.y = checkpoints[dernier_cp].y;
                decor_scroll = checkpoints[dernier_cp].scroll;
                joueur.dx = joueur.dy = 0;
            } else {
                stop_sample(lave);
                menu_principal(lave, menu);
                break;
            }
        }


        // Mise Ã  jour du dÃ©filement

        // Affichage des objets spÃ©ciaux en fonction du temps
        if (temps_actuel >= 1) afficher_gros = 1;
        if (temps_actuel >= 1) afficher_petit = 1;
        if (temps_actuel >= 1) afficher_vite = 1;


        // Gestion des collisions avec les objets spÃ©ciaux
        if (afficher_gros && !gros_collision) {
            int gros_x_ecran = gros_x - decor_scroll;
            if (collision(joueur.x, joueur.y, joueur.largeur, joueur.hauteur,
                          gros_x_ecran, gros_y, img_gros->w, img_gros->h)) {
                gros_collision = 1;
                facteur_perso = 1.5;
                joueur.largeur = 40 * facteur_perso;
                joueur.hauteur = 40 * facteur_perso;
            }
        }

        if (afficher_petit && !petit_collision) {
            int petit_x_ecran = petit_x - decor_scroll;
            if (collision(joueur.x, joueur.y, joueur.largeur, joueur.hauteur,
                          petit_x_ecran, petit_y, img_petit->w, img_petit->h)) {
                petit_collision = 1;
                facteur_perso = 0.8;
                joueur.largeur = 40 * facteur_perso;
                joueur.hauteur = 40 * facteur_perso;
            }
        }


        if (afficher_vite && !vite_collision) {
            int vite_x_ecran = vite_x - decor_scroll;
            if (collision(joueur.x, joueur.y, joueur.largeur, joueur.hauteur,
                          vite_x_ecran, vite_y, img_vite->w, img_vite->h)) {
                joueur.bonus_vite_actif = 1;
                temps_bonus_vite = 0;
                afficher_vite = 0;
                vite_collision = 1;
                vitesse_scroll += 5; // Augmente la vitesse
                          }
        }

        // Gestion durÃ©e bonus
        if (joueur.bonus_vite_actif) {
            temps_bonus_vite += 20;
            if (temps_bonus_vite >= 10000) { // 5 secondes
                vitesse_scroll = 3; // Retour Ã  la vitesse normale
                joueur.bonus_vite_actif = 0;
            }
        }

        decor_scroll += vitesse_scroll; // Utiliser la vitesse variable

        // Affichage de la scÃ¨ne
        afficher_scene(page, fond, sprite1, sprite2,
                               roues, roues_struct, NB_ROUES, &joueur, sprite_state,
                               facteur_perso, decor_scroll, temps_actuel,
                               afficher_gros, gros_collision, img_gros, gros_x, gros_y,
                               afficher_petit, petit_collision, img_petit, petit_x, petit_y, afficher_vite, vite_collision, img_vite, vite_x, vite_y,
                               img_checkpoint, checkpoints, positions_cp,
                               img_trainee, temps_trainee, img_champi, position_champi);
        ;

        rest(20);
        if (temps_trainee > 0) {
            temps_trainee -= 20;
            if (temps_trainee < 0) temps_trainee = 0;
        }
    }

    // Nettoyage des ressources
    nettoyer_ressources(fond, collision_map, sprite1, sprite2, img_gros, img_petit, roues, page, img_petit);
    if (musique_niveau) stop_sample(musique_niveau);  // ArrÃªter avant de dÃ©truire
    destroy_sample(musique_niveau);
    if (img_vite) destroy_bitmap(img_vite);

}


void charger_ressources_niveau(TypeNiveau niveau, BITMAP **fond, BITMAP **collision_map,
                              BITMAP **sprite1, BITMAP **sprite2, BITMAP **img_gros,
                              BITMAP *roues[], BITMAP **img_petit, BITMAP **img_explosion,
                              BITMAP **img_trainee, BITMAP **img_checkpoint,
                              Roue roues_struct[], Checkpoint checkpoints[],
                              int positions_cp[][2], BITMAP **img_vite, SAMPLE **musique,
                              BITMAP **img_champi, int position_champi[][2], champi champis[]) {
    static NiveauRessources niveaux[NB_NIVEAUX];
    static int initialise = 0;

    if (!initialise) {
        initialiser_ressources_niveaux(niveaux);
        initialise = 1;
    }


    NiveauRessources *n = &niveaux[niveau];

    // Charger les bitmaps
    *fond = load_bitmap(n->fond_path, NULL);
    if (!*fond) {
        allegro_message("Erreur : impossible de charger %s", n->fond_path);
        exit(1);
    }
    *collision_map = load_bitmap(n->collision_path, NULL);
    *sprite1 = load_bitmap(n->sprite1_path, NULL);
    *sprite2 = load_bitmap(n->sprite2_path, NULL);
    *img_gros = load_bitmap(n->img_gros_path, NULL);
    *img_petit = load_bitmap(n->img_petit_path, NULL);
    *img_vite = load_bitmap(n->img_vite_path, NULL);

    // Charger la musique
    *img_explosion = load_bitmap(n->explosion_path, NULL);
    *img_trainee = load_bitmap(n->trainee_path,NULL);
    *img_checkpoint = load_bitmap(n->checkpoint_path, NULL);
    *img_champi = load_bitmap(n->champi_path, NULL);

    // Initialiser les positions des champignons
    for (int i = 0; i < NB_CHAMPI; i++) {
        champis[i].x = n->positions_champi[i][0];
        champis[i].y = n->positions_champi[i][1];
        position_champi[i][0] = n->positions_champi[i][0];
        position_champi[i][1] = n->positions_champi[i][1];
    }

    for (int i = 0; i < 4; i++) {
        roues[i] = load_bitmap(n->roues_paths[i], NULL);
        if (!roues[i]) {
            allegro_message("Erreur chargement %s", n->roues_paths[i]);
            return;
        }
    }

    // Initialiser les positions des roues et checkpoints
    for (int i = 0; i < NB_ROUES; i++) {
        roues_struct[i] = n->roues_positions[i];
    }

    for (int i = 0; i < NB_CHECKPOINTS; i++) {
        checkpoints[i].x = n->positions_cp[i][0];
        checkpoints[i].y = n->positions_cp[i][1];
        checkpoints[i].actif = 0;

        // ðŸ‘‡ copie les positions brutes dans positions_cp (pour affichage et dÃ©tection)
        positions_cp[i][0] = n->positions_cp[i][0];
        positions_cp[i][1] = n->positions_cp[i][1];
    }
    roues_struct[4].sens_vertical = 1;
    roues_struct[4].limite_haut = 150;
    roues_struct[4].limite_bas = 450;
}


void menu_principal(SAMPLE* lave, SAMPLE* menu) {
    stop_sample(lave);
    play_sample(menu, 5, 128, 950, 1);// volume max, centre, frÃ©quence, rÃ©pÃ©ter (1 = oui)
    BITMAP *buffer = create_bitmap(MY_SCREEN_W, MY_SCREEN_H);
    BITMAP *fondmenu = load_bitmap("fondmenu.bmp", NULL);
    BITMAP *marbre = load_bitmap("marbre.bmp", NULL);
    BITMAP *img_volcan = load_bitmap("volcan.bmp", NULL);
    BITMAP *img_montagne = load_bitmap("montagne.bmp", NULL);
    BITMAP *img_mer = load_bitmap("mer.bmp", NULL);

    if (!fondmenu || !marbre || !img_volcan || !img_montagne || !img_mer) {
        allegro_message("Erreur chargement images menu : %s", allegro_error);
        return;
    }

    char pseudo[MAX_NAME_LENGTH] = "";
    int etape_menu = 0; // 0 = pseudo, 1 = boutons, 2 = maps
    int pseudo_index = 0;

    while (!key[KEY_ESC]) {
        clear(buffer);
        stretch_blit(fondmenu, buffer, 0, 0, fondmenu->w, fondmenu->h, 0, 0, MY_SCREEN_W, MY_SCREEN_H);
        textout_centre_ex(buffer, font, "==== BADLAND ====", MY_SCREEN_W / 2, 30, makecol(255, 215, 0), -1);

        if (etape_menu == 0) {
            // =========== SAISIE PSEUDO ===========
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, 200, 160, 400, 200);
            rect(buffer, 200, 160, 600, 360, makecol(0, 0, 0));
            textout_centre_ex(buffer, font, "RENTRER PSEUDO", 400, 180, makecol(0, 0, 0), -1);
            rectfill(buffer, 250, 220, 550, 260, makecol(255, 230, 220));
            rect(buffer, 250, 220, 550, 260, makecol(0, 0, 0));
            textprintf_ex(buffer, font, 260, 235, makecol(0, 0, 0), -1, "%s", pseudo);

            int ok_x1 = 350, ok_y1 = 290, ok_x2 = 450, ok_y2 = 320;
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, ok_x1, ok_y1, ok_x2 - ok_x1, ok_y2 - ok_y1);
            rect(buffer, ok_x1, ok_y1, ok_x2, ok_y2, makecol(0, 0, 0));
            textout_centre_ex(buffer, font, "OK", 400, 300, makecol(0, 0, 0), -1);

            if (keypressed()) {
                int key_code = readkey();
                int k = key_code >> 8;
                char ch = key_code & 0xff;
                if (k == KEY_ENTER && pseudo_index > 0) etape_menu = 1;
                else if (k == KEY_BACKSPACE && pseudo_index > 0) pseudo[--pseudo_index] = '\0';
                else if (pseudo_index < MAX_NAME_LENGTH - 1 && ch >= 32 && ch <= 126) {
                    pseudo[pseudo_index++] = ch;
                    pseudo[pseudo_index] = '\0';
                }
            }

            if (mouse_b & 1 &&
                mouse_x >= ok_x1 && mouse_x <= ok_x2 &&
                mouse_y >= ok_y1 && mouse_y <= ok_y2 &&
                pseudo_index > 0) {
                etape_menu = 1;
                rest(200);
            }

        } else if (etape_menu == 1) {
            // ========== BOUTONS NOUVELLE / CHARGER ==========
            textprintf_ex(buffer, font, 10, 40, makecol(255, 255, 255), -1, "Joueur: %s", pseudo);
            textout_centre_ex(buffer, font, "Que veux-tu faire ?", MY_SCREEN_W / 2, 80, makecol(255, 255, 255), -1);

            int btn_w = 250, btn_h = 80;
            int btn_x = (MY_SCREEN_W - btn_w) / 2;
            int btn_y1 = 180;
            int btn_y2 = 300;

            // Fond marbre + texte
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, btn_x, btn_y1, btn_w, btn_h);
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, btn_x, btn_y2, btn_w, btn_h);
            rect(buffer, btn_x, btn_y1, btn_x + btn_w, btn_y1 + btn_h, makecol(0, 0, 0));
            rect(buffer, btn_x, btn_y2, btn_x + btn_w, btn_y2 + btn_h, makecol(0, 0, 0));
            textout_centre_ex(buffer, font, "Nouvelle Partie", MY_SCREEN_W / 2, btn_y1 + 30, makecol(0, 0, 0), -1);
            textout_centre_ex(buffer, font, "Charger Partie", MY_SCREEN_W / 2, btn_y2 + 30, makecol(0, 0, 0), -1);

            // ==== BOUTONS RETOUR ET QUITTER ====
            int btn_ctrl_w = 100, btn_ctrl_h = 40;
            int retour_x = 20, retour_y = MY_SCREEN_H - 60;
            int quit_x = MY_SCREEN_W - 120, quit_y = MY_SCREEN_H - 60;

            // Bouton Retour
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, retour_x, retour_y, btn_ctrl_w, btn_ctrl_h);
            rect(buffer, retour_x, retour_y, retour_x + btn_ctrl_w, retour_y + btn_ctrl_h, makecol(0, 0, 0));
            textout_centre_ex(buffer, font, "< Retour", retour_x + btn_ctrl_w / 2, retour_y + 12, makecol(0, 0, 0), -1);

            // Bouton Quitter
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, quit_x, quit_y, btn_ctrl_w, btn_ctrl_h);
            rect(buffer, quit_x, quit_y, quit_x + btn_ctrl_w, quit_y + btn_ctrl_h, makecol(0, 0, 0));
            textout_centre_ex(buffer, font, "Quitter", quit_x + btn_ctrl_w / 2, quit_y + 12, makecol(0, 0, 0), -1);
            // Gestion clic
                if (mouse_b & 1) {
                    rest(200);
                    // Nouvelle Partie
                    if (mouse_x >= btn_x && mouse_x <= btn_x + btn_w &&
                        mouse_y >= btn_y1 && mouse_y <= btn_y1 + btn_h) {
                        etape_menu = 2;
                    }
                    // Charger Partie
                    else if (mouse_x >= btn_x && mouse_x <= btn_x + btn_w &&
                             mouse_y >= btn_y2 && mouse_y <= btn_y2 + btn_h) {
                        allegro_message("Chargement de partie non disponible.");
                    }
                    // Retour
                    else if (mouse_x >= retour_x && mouse_x <= retour_x + btn_ctrl_w &&
                             mouse_y >= retour_y && mouse_y <= retour_y + btn_ctrl_h) {
                        etape_menu = 0;
                    }
                // Quitter
                else if (mouse_x >= quit_x && mouse_x <= quit_x + btn_ctrl_w &&
                         mouse_y >= quit_y && mouse_y <= quit_y + btn_ctrl_h) {
                    break;
                }
            }

        } else if (etape_menu == 2) {
            // ========== CHOIX MAPS (inchangÃ©) ==========
            textprintf_ex(buffer, font, 10, 40, makecol(255, 255, 255), -1, "Joueur: %s", pseudo);
            textout_centre_ex(buffer, font, "Choisis un environnement :", MY_SCREEN_W / 2, 80, makecol(255, 255, 255), -1);

            int cadre_w = 220, cadre_h = 300;
            int img_w = 200, img_h = 280;
            int img_y = 130;
            int space = 40;
            int start_x = (MY_SCREEN_W - (3 * cadre_w + 2 * space)) / 2;

            // VOLCAN
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, start_x, img_y, cadre_w, cadre_h);
            stretch_blit(img_volcan, buffer, 0, 0, img_volcan->w, img_volcan->h,
                         start_x + (cadre_w - img_w) / 2, img_y + (cadre_h - img_h) / 2, img_w, img_h);
            textout_centre_ex(buffer, font, "Terre de Feu", start_x + cadre_w / 2, img_y + cadre_h + 10, makecol(255, 255, 255), -1);

            // MONTAGNE
            int mx = start_x + cadre_w + space;
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, mx, img_y, cadre_w, cadre_h);
            stretch_blit(img_montagne, buffer, 0, 0, img_montagne->w, img_montagne->h,
                         mx + (cadre_w - img_w) / 2, img_y + (cadre_h - img_h) / 2, img_w, img_h);
            textout_centre_ex(buffer, font, "Pics Silencieux", mx + cadre_w / 2, img_y + cadre_h + 10, makecol(255, 255, 255), -1);

            // MER
            int merx = start_x + 2 * (cadre_w + space);
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, merx, img_y, cadre_w, cadre_h);
            stretch_blit(img_mer, buffer, 0, 0, img_mer->w, img_mer->h,
                         merx + (cadre_w - img_w) / 2, img_y + (cadre_h - img_h) / 2, img_w, img_h);
            textout_centre_ex(buffer, font, "Rivages Perdus", merx + cadre_w / 2, img_y + cadre_h + 10, makecol(255, 255, 255), -1);

            // ==== BOUTONS RETOUR ET QUITTER ====
            int btn_ctrl_w = 100, btn_ctrl_h = 40;
            int retour_x = 20, retour_y = MY_SCREEN_H - 60;
            int quit_x = MY_SCREEN_W - 120, quit_y = MY_SCREEN_H - 60;

            // Bouton Retour
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, retour_x, retour_y, btn_ctrl_w, btn_ctrl_h);
            rect(buffer, retour_x, retour_y, retour_x + btn_ctrl_w, retour_y + btn_ctrl_h, makecol(0, 0, 0));
            textout_centre_ex(buffer, font, "< Retour", retour_x + btn_ctrl_w / 2, retour_y + 12, makecol(0, 0, 0), -1);

            // Bouton Quitter
            stretch_blit(marbre, buffer, 0, 0, marbre->w, marbre->h, quit_x, quit_y, btn_ctrl_w, btn_ctrl_h);
            rect(buffer, quit_x, quit_y, quit_x + btn_ctrl_w, quit_y + btn_ctrl_h, makecol(0, 0, 0));
            textout_centre_ex(buffer, font, "Quitter", quit_x + btn_ctrl_w / 2, quit_y + 12, makecol(0, 0, 0), -1);

            // CLIC MAP
            if (mouse_b & 1) {
                rest(200);
                if (mouse_x >= start_x && mouse_x <= start_x + cadre_w &&
       mouse_y >= img_y && mouse_y <= img_y + cadre_h) {
                    stop_sample(menu);
                    play_sample(lave, 5, 100, 920, 1);
                    jeu_scrolling(pseudo, NIVEAU_VOLCAN, lave, menu);
                    stop_sample(lave);

       }
                else if (mouse_x >= mx && mouse_x <= mx + cadre_w &&
                               mouse_y >= img_y && mouse_y <= img_y + cadre_h) {
                    stop_sample(menu);
                    play_sample(lave, 5, 100, 920, 1);
                        jeu_scrolling(pseudo, NIVEAU_MONTAGNE, lave, menu);
                    stop_sample(lave);

                               }
                else if (mouse_x >= merx && mouse_x <= merx + cadre_w &&
                                          mouse_y >= img_y && mouse_y <= img_y + cadre_h) {
                                   jeu_scrolling(pseudo, NIVEAU_MER, lave, menu);
                                          }
                // Retour
                if (mouse_x >= retour_x && mouse_x <= retour_x + btn_ctrl_w &&
                    mouse_y >= retour_y && mouse_y <= retour_y + btn_ctrl_h) {
                    etape_menu = 1;
                }
                // Quitter
                if (mouse_x >= quit_x && mouse_x <= quit_x + btn_ctrl_w &&
                    mouse_y >= quit_y && mouse_y <= quit_y + btn_ctrl_h) {
                    break;
                }
            }
        }

        blit(buffer, screen, 0, 0, 0, 0, MY_SCREEN_W, MY_SCREEN_H);
        rest(1);
    }

    if (fondmenu) destroy_bitmap(fondmenu);
    if (marbre) destroy_bitmap(marbre);
    if (img_volcan) destroy_bitmap(img_volcan);
    if (img_montagne) destroy_bitmap(img_montagne);
    if (img_mer) destroy_bitmap(img_mer);
    if (buffer) destroy_bitmap(buffer);

}
